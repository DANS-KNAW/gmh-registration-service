/**
 * Copyright (C) 2018 DANS - Data Archiving and Networked Services (info@dans.knaw.nl)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * NBN:Resolver
 * For easy retrieval of a publication or data, assigned with a Dutch NBN in the Netherlands, a service called <a href ='https://persistent-identifier.nl'>National Resolver</a> is available. This service is managed by <a href ='https://dans.knaw.nl'>Data Archiving and Networked Services</a> (DANS) and <a href=\"https://www.kb.nl\">KB, National Library of the Netherlands</a> (KB). Find out more about the <a href=\"https://www.kb.nl/organisatie/onderzoek-expertise/informatie-infrastructuur-diensten-voor-bibliotheken/registration-agency-nbn\">'Registration Agency NBN'</a>.
 *
 * OpenAPI spec version: 0.1.1
 * Contact: harvester@dans.knaw.nl
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package nl.knaw.dans.nbnresolver.model;

import javax.security.auth.Subject;
import java.security.Principal;
import java.util.Objects;

public class User implements java.security.Principal {

  private String orgPrefix;
  private boolean isLTP;
  private String registrantGroupId;
  private int registrantId;

  public User() {
  }

  public boolean isLTP() {
    return isLTP;
  }

  public void setLTP(boolean LTP) {
    isLTP = LTP;
  }

  public String getOrgPrefix() {
    return orgPrefix;
  }

  public void setOrgPrefix(String orgPrefix) {
    this.orgPrefix = orgPrefix;
  }

  public String getRegistrantGroupId() {
    return registrantGroupId;
  }

  public void setRegistrantGroupId(String registrantGroupId) {
    this.registrantGroupId = registrantGroupId;
  }

  public int getRegistrantId() {
    return registrantId;
  }

  public void setRegistrantId(int registrantId) {
    this.registrantId = registrantId;
  }

  @Override
  public String getName() {
    return orgPrefix;
  }

  @Override
  public boolean implies(Subject subject) {
    return Principal.super.implies(subject);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;
    User user = (User) o;
    return isLTP == user.isLTP && registrantId == user.registrantId && orgPrefix.equals(user.orgPrefix) && registrantGroupId.equals(user.registrantGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orgPrefix, isLTP, registrantGroupId, registrantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    isLTP: ").append(toIndentedString(isLTP)).append("\n");
    sb.append("    orgPrefix: ").append(toIndentedString(orgPrefix)).append("\n");
    sb.append("    registrantGroupId: ").append(toIndentedString(registrantGroupId)).append("\n");
    sb.append("    registrantId: ").append(toIndentedString(registrantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
